// Generated by Pdef Objective-C generator.

#import "MRPosts.h"
#import "MRPostData.h"
#import "MRPostData.h"
#import "MREditablePostData.h"
#import "MRPostData.h"
#import "MREditablePostData.h"
#import "MRPostData.h"
#import "MRPostData.h"
#import "MRPostData.h"
#import "MRPageQuery.h"
#import "MRPostImages.h"


#pragma mark MRPosts client
@implementation MRPostsClient

- (NSOperation *) getId:(int64_t )id
        callback:(void (^)(id result, NSError *error))callback {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"get"]
                         args:@{
                                 @"id" :@(id),
                         }];
    return [self.handler handleInvocation:_invocation callback:callback];
}
- (NSOperation *) createPost:(MREditablePostData *)post
        callback:(void (^)(id result, NSError *error))callback {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"create"]
                         args:@{
                                 @"post" :post,
                         }];
    return [self.handler handleInvocation:_invocation callback:callback];
}
- (NSOperation *) updateId:(int64_t )id
        post:(MREditablePostData *)post
        callback:(void (^)(id result, NSError *error))callback {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"update"]
                         args:@{
                                 @"id" :@(id),
                                 @"post" :post,
                         }];
    return [self.handler handleInvocation:_invocation callback:callback];
}
- (NSOperation *) deleteId:(int64_t )id
        callback:(void (^)(id result, NSError *error))callback {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"delete"]
                         args:@{
                                 @"id" :@(id),
                         }];
    return [self.handler handleInvocation:_invocation callback:callback];
}
- (NSOperation *) openId:(int64_t )id
        callback:(void (^)(id result, NSError *error))callback {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"open"]
                         args:@{
                                 @"id" :@(id),
                         }];
    return [self.handler handleInvocation:_invocation callback:callback];
}
- (NSOperation *) closeId:(int64_t )id
        callback:(void (^)(id result, NSError *error))callback {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"close"]
                         args:@{
                                 @"id" :@(id),
                         }];
    return [self.handler handleInvocation:_invocation callback:callback];
}
- (NSOperation *) queryUserId:(int64_t )userId
        page:(MRPageQuery *)page
        callback:(void (^)(id result, NSError *error))callback {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"query"]
                         args:@{
                                 @"userId" :@(userId),
                                 @"page" :page,
                         }];
    return [self.handler handleInvocation:_invocation callback:callback];
}
- (id<MRPostImages> ) images {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"images"]
                         args:@{
                         }];
    return [[MRPostImagesClient alloc] initWithHandler: self.handler parentInvocation:_invocation];
}

- (PDMethodDescriptor *)getMethodForName:(NSString *)name {
    return [MRPostsDescriptor() getMethodForName:name];
}
@end


#pragma mark MRPosts descriptor
static dispatch_once_t MRPostsOnce;
static PDInterfaceDescriptor *_MRPostsDescriptor;

PDInterfaceDescriptor *MRPostsDescriptor() {
    dispatch_once(&MRPostsOnce, ^() {
        _MRPostsDescriptor = [[PDInterfaceDescriptor alloc]
                initWithProtocol:@protocol(MRPosts)
                             exc:nil
                         methods:@[
     [[PDMethodDescriptor alloc]
             initWithName:@"get"
           resultSupplier:^PDDescriptor *() { return [MRPostData typeDescriptor]; }
                     args:@[
           [[PDArgumentDescriptor alloc] initWithName:@"id" type: [PDDescriptors int64] post:NO query:NO],
                        ]
                     post:NO],
     [[PDMethodDescriptor alloc]
             initWithName:@"create"
           resultSupplier:^PDDescriptor *() { return [MRPostData typeDescriptor]; }
                     args:@[
           [[PDArgumentDescriptor alloc] initWithName:@"post" type: [MREditablePostData typeDescriptor] post:YES query:NO],
                        ]
                     post:YES],
     [[PDMethodDescriptor alloc]
             initWithName:@"update"
           resultSupplier:^PDDescriptor *() { return [MRPostData typeDescriptor]; }
                     args:@[
           [[PDArgumentDescriptor alloc] initWithName:@"id" type: [PDDescriptors int64] post:NO query:NO],
           [[PDArgumentDescriptor alloc] initWithName:@"post" type: [MREditablePostData typeDescriptor] post:YES query:NO],
                        ]
                     post:YES],
     [[PDMethodDescriptor alloc]
             initWithName:@"delete"
           resultSupplier:^PDDescriptor *() { return [PDDescriptors void0]; }
                     args:@[
           [[PDArgumentDescriptor alloc] initWithName:@"id" type: [PDDescriptors int64] post:NO query:NO],
                        ]
                     post:YES],
     [[PDMethodDescriptor alloc]
             initWithName:@"open"
           resultSupplier:^PDDescriptor *() { return [MRPostData typeDescriptor]; }
                     args:@[
           [[PDArgumentDescriptor alloc] initWithName:@"id" type: [PDDescriptors int64] post:NO query:NO],
                        ]
                     post:YES],
     [[PDMethodDescriptor alloc]
             initWithName:@"close"
           resultSupplier:^PDDescriptor *() { return [MRPostData typeDescriptor]; }
                     args:@[
           [[PDArgumentDescriptor alloc] initWithName:@"id" type: [PDDescriptors int64] post:NO query:NO],
                        ]
                     post:YES],
     [[PDMethodDescriptor alloc]
             initWithName:@"query"
           resultSupplier:^PDDescriptor *() { return [PDDescriptors listWithElement:[MRPostData typeDescriptor]]; }
                     args:@[
           [[PDArgumentDescriptor alloc] initWithName:@"userId" type: [PDDescriptors int64] post:NO query:NO],
           [[PDArgumentDescriptor alloc] initWithName:@"page" type: [MRPageQuery typeDescriptor] post:NO query:YES],
                        ]
                     post:NO],
     [[PDMethodDescriptor alloc]
             initWithName:@"images"
           resultSupplier:^PDDescriptor *() { return MRPostImagesDescriptor(); }
                     args:@[]
                     post:NO],
                         ]];
    });
    return _MRPostsDescriptor;
}
