// Generated by Pdef Objective-C generator.

#import "MRBlockLists.h"
#import "MRUserData.h"
#import "MRPageQuery.h"


#pragma mark MRBlockLists client
@implementation MRBlockListsClient

- (NSOperation *) blockUserId:(int64_t )userId
        callback:(void (^)(id result, NSError *error))callback {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"block"]
                         args:@{
                                 @"userId" :@(userId),
                         }];
    return [self.handler handleInvocation:_invocation callback:callback];
}
- (NSOperation *) unblockUserId:(int64_t )userId
        callback:(void (^)(id result, NSError *error))callback {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"unblock"]
                         args:@{
                                 @"userId" :@(userId),
                         }];
    return [self.handler handleInvocation:_invocation callback:callback];
}
- (NSOperation *) queryPage:(MRPageQuery *)page
        callback:(void (^)(id result, NSError *error))callback {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"query"]
                         args:@{
                                 @"page" :page,
                         }];
    return [self.handler handleInvocation:_invocation callback:callback];
}

- (PDMethodDescriptor *)getMethodForName:(NSString *)name {
    return [MRBlockListsDescriptor() getMethodForName:name];
}
@end


#pragma mark MRBlockLists descriptor
static dispatch_once_t MRBlockListsOnce;
static PDInterfaceDescriptor *_MRBlockListsDescriptor;

PDInterfaceDescriptor *MRBlockListsDescriptor() {
    dispatch_once(&MRBlockListsOnce, ^() {
        _MRBlockListsDescriptor = [[PDInterfaceDescriptor alloc]
                initWithProtocol:@protocol(MRBlockLists)
                             exc:nil
                         methods:@[
     [[PDMethodDescriptor alloc]
             initWithName:@"block"
           resultSupplier:^PDDescriptor *() { return [PDDescriptors void0]; }
                     args:@[
           [[PDArgumentDescriptor alloc] initWithName:@"userId" type: [PDDescriptors int64] post:NO query:NO],
                        ]
                     post:YES],
     [[PDMethodDescriptor alloc]
             initWithName:@"unblock"
           resultSupplier:^PDDescriptor *() { return [PDDescriptors void0]; }
                     args:@[
           [[PDArgumentDescriptor alloc] initWithName:@"userId" type: [PDDescriptors int64] post:NO query:NO],
                        ]
                     post:YES],
     [[PDMethodDescriptor alloc]
             initWithName:@"query"
           resultSupplier:^PDDescriptor *() { return [PDDescriptors listWithElement:[MRUserData typeDescriptor]]; }
                     args:@[
           [[PDArgumentDescriptor alloc] initWithName:@"page" type: [MRPageQuery typeDescriptor] post:NO query:YES],
                        ]
                     post:NO],
                         ]];
    });
    return _MRBlockListsDescriptor;
}
