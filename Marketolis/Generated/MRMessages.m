// Generated by Pdef Objective-C generator.

#import "MRMessages.h"
#import "MRMessageData.h"
#import "MRMessageData.h"
#import "MRInboxData.h"
#import "MRInboxThreadData.h"
#import "MRInboxThreadData.h"
#import "MRPageQuery.h"
#import "MRMessageData.h"
#import "MRPageQuery.h"


#pragma mark MRMessages client
@implementation MRMessagesClient

- (NSOperation *) sendThreadId:(int64_t )threadId
        text:(NSString *)text
        callback:(void (^)(id result, NSError *error))callback {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"send"]
                         args:@{
                                 @"threadId" :@(threadId),
                                 @"text" :text,
                         }];
    return [self.handler handleInvocation:_invocation callback:callback];
}
- (NSOperation *) sendToPostPostId:(int64_t )postId
        text:(NSString *)text
        callback:(void (^)(id result, NSError *error))callback {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"sendToPost"]
                         args:@{
                                 @"postId" :@(postId),
                                 @"text" :text,
                         }];
    return [self.handler handleInvocation:_invocation callback:callback];
}
- (NSOperation *) inboxCallback:(void (^)(id result, NSError *error))callback {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"inbox"]
                         args:@{
                         }];
    return [self.handler handleInvocation:_invocation callback:callback];
}
- (NSOperation *) threadId:(int64_t )id
        callback:(void (^)(id result, NSError *error))callback {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"thread"]
                         args:@{
                                 @"id" :@(id),
                         }];
    return [self.handler handleInvocation:_invocation callback:callback];
}
- (NSOperation *) threadsPage:(MRPageQuery *)page
        callback:(void (^)(id result, NSError *error))callback {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"threads"]
                         args:@{
                                 @"page" :page,
                         }];
    return [self.handler handleInvocation:_invocation callback:callback];
}
- (NSOperation *) messagesThreadId:(int64_t )threadId
        page:(MRPageQuery *)page
        callback:(void (^)(id result, NSError *error))callback {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"messages"]
                         args:@{
                                 @"threadId" :@(threadId),
                                 @"page" :page,
                         }];
    return [self.handler handleInvocation:_invocation callback:callback];
}
- (NSOperation *) markThreadAsReadThreadId:(int64_t )threadId
        callback:(void (^)(id result, NSError *error))callback {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"markThreadAsRead"]
                         args:@{
                                 @"threadId" :@(threadId),
                         }];
    return [self.handler handleInvocation:_invocation callback:callback];
}
- (NSOperation *) deleteThreadThreadId:(int64_t )threadId
        callback:(void (^)(id result, NSError *error))callback {
    PDInvocation *_invocation = [self
            captureInvocation:[self getMethodForName:@"deleteThread"]
                         args:@{
                                 @"threadId" :@(threadId),
                         }];
    return [self.handler handleInvocation:_invocation callback:callback];
}

- (PDMethodDescriptor *)getMethodForName:(NSString *)name {
    return [MRMessagesDescriptor() getMethodForName:name];
}
@end


#pragma mark MRMessages descriptor
static dispatch_once_t MRMessagesOnce;
static PDInterfaceDescriptor *_MRMessagesDescriptor;

PDInterfaceDescriptor *MRMessagesDescriptor() {
    dispatch_once(&MRMessagesOnce, ^() {
        _MRMessagesDescriptor = [[PDInterfaceDescriptor alloc]
                initWithProtocol:@protocol(MRMessages)
                             exc:nil
                         methods:@[
     [[PDMethodDescriptor alloc]
             initWithName:@"send"
           resultSupplier:^PDDescriptor *() { return [MRMessageData typeDescriptor]; }
                     args:@[
           [[PDArgumentDescriptor alloc] initWithName:@"threadId" type: [PDDescriptors int64] post:NO query:NO],
           [[PDArgumentDescriptor alloc] initWithName:@"text" type: [PDDescriptors string] post:YES query:NO],
                        ]
                     post:YES],
     [[PDMethodDescriptor alloc]
             initWithName:@"sendToPost"
           resultSupplier:^PDDescriptor *() { return [MRMessageData typeDescriptor]; }
                     args:@[
           [[PDArgumentDescriptor alloc] initWithName:@"postId" type: [PDDescriptors int64] post:NO query:NO],
           [[PDArgumentDescriptor alloc] initWithName:@"text" type: [PDDescriptors string] post:YES query:NO],
                        ]
                     post:YES],
     [[PDMethodDescriptor alloc]
             initWithName:@"inbox"
           resultSupplier:^PDDescriptor *() { return [MRInboxData typeDescriptor]; }
                     args:@[]
                     post:NO],
     [[PDMethodDescriptor alloc]
             initWithName:@"thread"
           resultSupplier:^PDDescriptor *() { return [MRInboxThreadData typeDescriptor]; }
                     args:@[
           [[PDArgumentDescriptor alloc] initWithName:@"id" type: [PDDescriptors int64] post:NO query:NO],
                        ]
                     post:NO],
     [[PDMethodDescriptor alloc]
             initWithName:@"threads"
           resultSupplier:^PDDescriptor *() { return [PDDescriptors listWithElement:[MRInboxThreadData typeDescriptor]]; }
                     args:@[
           [[PDArgumentDescriptor alloc] initWithName:@"page" type: [MRPageQuery typeDescriptor] post:NO query:YES],
                        ]
                     post:NO],
     [[PDMethodDescriptor alloc]
             initWithName:@"messages"
           resultSupplier:^PDDescriptor *() { return [PDDescriptors listWithElement:[MRMessageData typeDescriptor]]; }
                     args:@[
           [[PDArgumentDescriptor alloc] initWithName:@"threadId" type: [PDDescriptors int64] post:NO query:NO],
           [[PDArgumentDescriptor alloc] initWithName:@"page" type: [MRPageQuery typeDescriptor] post:NO query:YES],
                        ]
                     post:NO],
     [[PDMethodDescriptor alloc]
             initWithName:@"markThreadAsRead"
           resultSupplier:^PDDescriptor *() { return [PDDescriptors void0]; }
                     args:@[
           [[PDArgumentDescriptor alloc] initWithName:@"threadId" type: [PDDescriptors int64] post:NO query:NO],
                        ]
                     post:YES],
     [[PDMethodDescriptor alloc]
             initWithName:@"deleteThread"
           resultSupplier:^PDDescriptor *() { return [PDDescriptors void0]; }
                     args:@[
           [[PDArgumentDescriptor alloc] initWithName:@"threadId" type: [PDDescriptors int64] post:NO query:NO],
                        ]
                     post:YES],
                         ]];
    });
    return _MRMessagesDescriptor;
}
